Index: navit/navit/bookmarks.c
===================================================================
--- navit.orig/navit/bookmarks.c	2012-05-14 23:09:04.000000000 +0200
+++ navit/navit/bookmarks.c	2012-05-15 23:38:41.000000000 +0200
@@ -643,11 +643,13 @@
 struct former_destination{
 	enum item_type type;
 	char* description;
-	struct coord c;
+	GList* c;
 };
 
 static void free_former_destination(struct former_destination* former_destination){
 	g_free(former_destination->description);
+	g_list_foreach(former_destination->c, (GFunc)g_free, NULL);
+	g_list_free(former_destination->c);
 	g_free(former_destination);
 }
 
@@ -657,15 +659,22 @@
 	struct item *item;
 	struct attr attr;
 	struct former_destination *dest;
+	struct coord c;
+	int more;
 	GList* list = NULL;
 	if (map && (mr=map_rect_new(map, NULL))) {
 		while ((item=map_rect_get_item(mr))) {
 			if (item->type != type_former_destination) continue;
-			dest = g_new(struct former_destination, 1);
+			dest = g_new0(struct former_destination, 1);
 			dest->type=item->type;
 			item_attr_get(item, attr_label, &attr);
 			dest->description = g_strdup(attr.u.str);
-			item_coord_get(item, &(dest->c), 1);
+			more = item_coord_get(item, &c, 1);
+			while (more) {
+				dest->c = g_list_append(dest->c, g_new(struct coord, 1));
+				*(struct coord *)g_list_last(dest->c)->data = c;
+				more = item_coord_get(item, &c, 1);
+			}
 			list = g_list_prepend(list, dest);
 		}
 		map_rect_destroy(mr);
@@ -678,7 +687,7 @@
 {
 	if ((dest1->type == dest2->type) &&
 	    (!strcmp(dest1->description, dest2->description)) &&
-	    (coord_equal(&(dest1->c), &(dest2->c)))){
+	    (coord_equal((struct coord *)g_list_last(dest1->c)->data, (struct coord *)g_list_last(dest2->c)->data))){
 		return TRUE;
 	}
 	return FALSE;
@@ -709,6 +718,8 @@
 {
 	FILE *f;
 	GList* currdest = NULL;
+	GList* c_list = NULL;
+	struct coord *c;
 	struct former_destination *dest;
 	const char* prostr = projection_to_name(proj);
 	f=fopen(former_destination_file, "w");
@@ -719,11 +730,15 @@
 				fprintf(f,"type=%s label=\"%s\"\n", item_to_name(dest->type), dest->description);
 			else
 				fprintf(f,"type=%s\n", item_to_name(dest->type));
-			fprintf(f,"%s%s%s0x%x %s0x%x\n",
-			prostr, *prostr ? ":" : "",
-			dest->c.x >= 0 ? "":"-", dest->c.x >= 0 ? dest->c.x : -dest->c.x,
-			dest->c.y >= 0 ? "":"-", dest->c.y >= 0 ? dest->c.y : -dest->c.y);
-			
+			c_list = dest->c;
+			do {
+				c = (struct coord *)c_list->data;
+				fprintf(f,"%s%s%s0x%x %s0x%x\n",
+					prostr, *prostr ? ":" : "",
+					c->x >= 0 ? "":"-", c->x >= 0 ? c->x : -c->x,
+					c->y >= 0 ? "":"-", c->y >= 0 ? c->y : -c->y);
+				c_list = g_list_next(c_list);
+			} while (c_list);
 		}
 		fclose(f);
 	} else {
@@ -735,21 +750,27 @@
  * @param limit Limits the number of entries in the "backlog". Set to 0 for "infinite"
  */
 void
-bookmarks_append_coord(struct map *former_destination_map, char *former_destination_file, 
-		struct pcoord *c, enum item_type type, const char *description, int limit)
+bookmarks_append_destinations(struct map *former_destination_map, char *former_destination_file,
+		struct pcoord *c, int count, enum item_type type, const char *description, int limit)
 {
 	struct former_destination *new_dest;
 	GList* former_destinations = NULL;
 	GList* former_destinations_shortened = NULL;
+	struct coord* c_dup;
 	int no_of_former_destinations;
+	int i;
 
 	former_destinations = read_former_destination_map_as_list(former_destination_map);
 
- 	new_dest = g_new(struct former_destination, 1);
+ 	new_dest = g_new0(struct former_destination, 1);
  	new_dest->type = type;
  	new_dest->description = g_strdup(description?description:_("Map Point"));
- 	new_dest->c.x = c->x;
- 	new_dest->c.y = c->y;
+	for (i=0; i<count; i++) {
+		c_dup = g_new(struct coord, 1);
+ 		c_dup->x = c[i].x;
+	 	c_dup->y = c[i].y;
+		new_dest->c = g_list_append(new_dest->c, c_dup);
+	}
 	former_destinations = remove_destination_from_list(new_dest, former_destinations);
  	former_destinations = g_list_append(former_destinations, new_dest);
 
@@ -764,3 +785,23 @@
 	g_list_free(former_destinations);
 }
 
+/**
+ * @param limit Limits the number of entries in the "backlog". Set to 0 for "infinite"
+ */
+void
+bookmarks_replace_destinations(struct map *former_destination_map, char *former_destination_file,
+		struct pcoord *c, int count, enum item_type type, const char *description, int limit)
+{
+	GList* former_destinations = NULL;
+	struct former_destination *dest;
+
+	/* First, remove the last former_destination */
+	former_destinations = read_former_destination_map_as_list(former_destination_map);
+	dest = g_list_last(former_destinations)->data;
+	former_destinations = g_list_remove(former_destinations, dest);
+	free_former_destination(dest);
+	write_former_destinations(former_destinations, former_destination_file, map_projection(former_destination_map));
+
+	/* Then, append the new one */
+	bookmarks_append_destinations(former_destination_map, former_destination_file, c, count, type, description, limit);
+}
Index: navit/navit/bookmarks.h
===================================================================
--- navit.orig/navit/bookmarks.h	2012-05-14 23:09:04.000000000 +0200
+++ navit/navit/bookmarks.h	2012-05-15 23:38:41.000000000 +0200
@@ -54,7 +54,8 @@
 void bookmarks_set_center_from_file(struct bookmarks *this_, char *file);
 char* bookmarks_get_center_file(gboolean create);
 void bookmarks_write_center_to_file(struct bookmarks *this_, char *file);
-void bookmarks_append_coord(struct map *former_destination_map, char *file, struct pcoord *c, enum item_type type, const char *description, int limit);
+void bookmarks_append_destinations(struct map *former_destination_map, char *file, struct pcoord *c, int count, enum item_type type, const char *description, int limit);
+void bookmarks_replace_destinations(struct map *former_destination_map, char *file, struct pcoord *c, int count, enum item_type type, const char *description, int limit);
 /* end of prototypes */
 
 #ifdef __cplusplus
Index: navit/navit/navit.c
===================================================================
--- navit.orig/navit/navit.c	2012-05-14 23:09:04.000000000 +0200
+++ navit/navit/navit.c	2012-05-15 23:40:13.000000000 +0200
@@ -1541,13 +1541,22 @@
 navit_set_destination(struct navit *this_, struct pcoord *c, const char *description, int async)
 {
 	char *destination_file;
+	struct pcoord pc[16];
+	int count;
 	destination_file = bookmarks_get_destination_file(TRUE);
 	if (c) {
+		dbg(1, "c=(%i,%i)\n", c->x,c->y);
+		if (this_->destination_valid && this_->waypoints_flag) {
+			count=route_get_destinations(this_->route, pc, 16);
+			if (count < 16) {
+				pc[count++] = *c;
+				bookmarks_replace_destinations(this_->former_destination, destination_file, pc, count, type_former_destination, description, this_->recentdest_count);
+			}
+		} else {
+			bookmarks_append_destinations(this_->former_destination, destination_file, c, 1, type_former_destination, description, this_->recentdest_count);
+		}
 		this_->destination=*c;
 		this_->destination_valid=1;
-
-		dbg(1, "c=(%i,%i)\n", c->x,c->y);
-		bookmarks_append_coord(this_->former_destination, destination_file, c, type_former_destination, description, this_->recentdest_count);
 	} else {
 		this_->destination_valid=0;
 		navit_mark_navigation_stopped(destination_file);
@@ -1585,7 +1594,7 @@
 		this_->destination_valid=1;
 
 		destination_file = bookmarks_get_destination_file(TRUE);
-		bookmarks_append_coord(this_->former_destination, destination_file, c, type_former_itinerary, description, this_->recentdest_count);
+		bookmarks_append_destinations(this_->former_destination, destination_file, c, count, type_former_itinerary, description, this_->recentdest_count);
 		g_free(destination_file);
 	} else
 		this_->destination_valid=0;
@@ -2980,18 +2989,18 @@
 	if (this_->route) {
 		switch(route_destination_reached(this_->route)) {
 		case 1:
-			description=route_get_destination_description(this_->route, 0);
 			route_remove_waypoint(this_->route);
 			count=route_get_destinations(this_->route, pc, 16);
+			description=route_get_destination_description(this_->route, count-1);
 			destination_file = bookmarks_get_destination_file(TRUE);
-			bookmarks_append_coord(this_->former_destination, destination_file, pc, type_former_itinerary_part, description, this_->recentdest_count);
+			bookmarks_replace_destinations(this_->former_destination, destination_file, pc, count, type_former_destination, description, this_->recentdest_count);
 			g_free(description);
 			break;	
 		case 2:
 			description=route_get_destination_description(this_->route, 0);
 			count=route_get_destinations(this_->route, pc, 1);
 			destination_file = bookmarks_get_destination_file(TRUE);
-			bookmarks_append_coord(this_->former_destination, destination_file, pc, type_former_itinerary_part, description, this_->recentdest_count);
+			bookmarks_replace_destinations(this_->former_destination, destination_file, pc, 1, type_former_destination, description, this_->recentdest_count);
 			g_free(description);
 			navit_set_destination(this_, NULL, NULL, 0);
 			break;
