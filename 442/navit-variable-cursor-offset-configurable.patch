diff -Naur navit.orig/navit/attr_def.h navit/navit/attr_def.h
--- navit.orig/navit/attr_def.h	2009-10-26 08:35:25.000000000 +0100
+++ navit/navit/attr_def.h	2009-10-28 14:50:41.000000000 +0100
@@ -124,6 +124,10 @@
 ATTR(bpp)
 ATTR(fullscreen)
 ATTR(windowid)
+ATTR(min_offset)
+ATTR(max_offset)
+ATTR(min_offset_speed)
+ATTR(max_offset_speed)
 ATTR2(0x00027500,type_rel_abs_begin)
 /* These attributes are int that can either hold relative		*
  * or absolute values. A relative value is indicated by 		*
diff -Naur navit.orig/navit/navit.c navit/navit/navit.c
--- navit.orig/navit/navit.c	2009-10-26 08:35:25.000000000 +0100
+++ navit/navit/navit.c	2009-10-28 14:52:47.000000000 +0100
@@ -79,6 +79,10 @@
 	struct vehicle *vehicle;
 	struct attr callback;
 	int animate_cursor;
+	int min_offset; /* Offset from screen center to draw the cursor (0-50 %) */
+	int max_offset;
+	int min_offset_speed; /* Below this speed (km/h) screen offset is min_offset */
+	int max_offset_speed; /* Above this speed (km/h) screen offset is max_offset */
 };
 
 struct navit {
@@ -1515,22 +1519,21 @@
 {
 	int width, height;
 	struct navit_vehicle *nv=this_->vehicle;
+	float offset;
 
-        float offset=30;            // Cursor offset from the center of the screen (percent).
-#if 0 /* Better improve track.c to get that issue resolved or make it configurable with being off the default, the jumping back to the center is a bit annoying */
-        float min_offset = 0.;      // Percent offset at min_offset_speed.
-        float max_offset = 30.;     // Percent offset at max_offset_speed.
-        int min_offset_speed = 2;   // Speed in km/h
-        int max_offset_speed = 50;  // Speed ini km/h
-        // Calculate cursor offset from the center of the screen, upon speed.
-        if (nv->speed <= min_offset_speed) {
-            offset = min_offset;
-        } else if (nv->speed > max_offset_speed) {
-            offset = max_offset;
-        } else {
-            offset = (max_offset - min_offset) / (max_offset_speed - min_offset_speed) * (nv->speed - min_offset_speed);
-        }
-#endif
+	if (nv->min_offset == nv->max_offset) {
+		offset = (float)nv->min_offset;
+	} else {
+
+		// Calculate cursor offset from the center of the screen, upon speed.
+		if (nv->speed <= nv->min_offset_speed) {
+			offset = (float)nv->min_offset;
+		} else if (nv->speed > nv->max_offset_speed) {
+			offset = (float)nv->max_offset;
+		} else {
+			offset = (float)(nv->max_offset - nv->min_offset) / (nv->max_offset_speed - nv->min_offset_speed) * (nv->speed - nv->min_offset_speed);
+		}
+	}
 
 	transform_get_size(this_->trans, &width, &height);
 	if (this_->orientation == -1) {
@@ -2187,11 +2190,15 @@
 navit_add_vehicle(struct navit *this_, struct vehicle *v)
 {
 	struct navit_vehicle *nv=g_new0(struct navit_vehicle, 1);
-	struct attr follow, active, animate;
+	struct attr follow, active, animate, min_offset, max_offset, min_offset_speed, max_offset_speed;
 	nv->vehicle=v;
 	nv->follow=0;
 	nv->last.x = 0;
 	nv->last.y = 0;
+	nv->min_offset = 30;
+	nv->max_offset = 30;
+	nv->min_offset_speed = 3;
+	nv->max_offset_speed = 60;
 	nv->animate_cursor=0;
 	if ((vehicle_get_attr(v, attr_follow, &follow, NULL)))
 		nv->follow=nv->follow=follow.u.num;
@@ -2201,6 +2208,14 @@
 		navit_set_vehicle(this_, nv);
 	if ((vehicle_get_attr(v, attr_animate, &animate, NULL)))
 		nv->animate_cursor=animate.u.num;
+	if ((vehicle_get_attr(v, attr_min_offset, &min_offset, NULL)))
+		nv->min_offset=min_offset.u.num;
+	if ((vehicle_get_attr(v, attr_max_offset, &max_offset, NULL)))
+		nv->max_offset=max_offset.u.num;
+	if ((vehicle_get_attr(v, attr_min_offset_speed, &min_offset_speed, NULL)))
+		nv->min_offset_speed=min_offset_speed.u.num;
+	if ((vehicle_get_attr(v, attr_max_offset_speed, &max_offset_speed, NULL)))
+		nv->max_offset_speed=max_offset_speed.u.num;
 	nv->callback.type=attr_callback;
 	nv->callback.u.callback=callback_new_attr_2(callback_cast(navit_vehicle_update), attr_position_coord_geo, this_, nv);
 	vehicle_add_attr(nv->vehicle, &nv->callback);
