Index: navit/navit/android/src/org/navitproject/navit/NavitGraphics.java
===================================================================
--- navit/navit/android/src/org/navitproject/navit/NavitGraphics.java	(revision 5909)
+++ navit/navit/android/src/org/navitproject/navit/NavitGraphics.java	(working copy)
@@ -134,10 +134,14 @@
 		@Override
 		protected void onCreateContextMenu(ContextMenu menu) {
 			super.onCreateContextMenu(menu);
-			
+			String compass = "enable magnetic_compass";
+			if (NavitVehicle.want_magnetic_compass){
+				compass = "disable magnetic compass";
+			}
 			menu.setHeaderTitle(Navit._("Position")+"..");
 			menu.add(1, 1, NONE, Navit._("Route to here")).setOnMenuItemClickListener(this);
-			menu.add(1, 2, NONE, Navit._("Cancel")).setOnMenuItemClickListener(this);
+			menu.add(1,2,NONE,compass).setOnMenuItemClickListener(this);
+			menu.add(1, 3, NONE, Navit._("Cancel")).setOnMenuItemClickListener(this);
 		}
 
 		@Override
@@ -148,6 +152,9 @@
 				   , (int)mPressedPosition.x, (int)mPressedPosition.y);
 				msg.sendToTarget();
 				break;
+			case 2:
+				NavitVehicle.toggleMagnetic();
+				break;
 			}
 			return false;
 		}
@@ -988,3 +995,4 @@
 	public static native String CallbackLocalizedString(String s);
 
 }
+
Index: navit/navit/android/src/org/navitproject/navit/NavitVehicle.java
===================================================================
--- navit/navit/android/src/org/navitproject/navit/NavitVehicle.java	(revision 5909)
+++ navit/navit/android/src/org/navitproject/navit/NavitVehicle.java	(working copy)
@@ -20,6 +20,10 @@
 package org.navitproject.navit;
 
 import android.content.Context;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
 import android.location.Criteria;
 import android.location.Location;
 import android.location.LocationListener;
@@ -26,6 +30,8 @@
 import android.location.LocationManager;
 import android.os.Bundle;
 import android.util.Log;
+import android.view.Surface;
+import android.view.WindowManager;
 
 public class NavitVehicle {
 
@@ -40,7 +46,125 @@
 	private static NavitLocationListener fastLocationListener = null;
 
 	public native void VehicleCallback(int id, Location location);
+	private Context context;
+	private static NavitMagneticCompass compass;
+	public static boolean want_magnetic_compass = false;
+	
+	private class NavitMagneticCompass implements SensorEventListener{
+		
+		SensorManager sensorManager;
+		
+		private Sensor sensorAccelerometer;
+		private Sensor sensorMagneticField;
+		private float[] valuesAccelerometer;
+		private float[] valuesMagneticField;
+		   
+		private float[] matrixR;
+		private float[] matrixI;
+		private float[] matrixValues;
+		static final float ALPHA_MAGNETIC = 0.2f;
+		static final float ALPHA_ACCELL = 0.1f;
+		private Double bearing;
+		 
+		 
+		 
+		public NavitMagneticCompass() {
+			
+			
+			 valuesAccelerometer = new float[3];
+			   valuesMagneticField = new float[3];
+			  
+			   matrixR = new float[9];
+			   matrixI = new float[9];
+			   matrixValues = new float[3];
+			  
+			   
+			   sensorManager = (SensorManager)context.getSystemService(Context.SENSOR_SERVICE);
+			   sensorAccelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+			   sensorMagneticField = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
+			   sensorManager.registerListener(this,
+					     sensorAccelerometer,
+					     SensorManager.SENSOR_DELAY_NORMAL);
+					   sensorManager.registerListener(this,
+					     sensorMagneticField,
+					     SensorManager.SENSOR_DELAY_NORMAL);
+		}
+		
+		
+		public void onSensorChanged(SensorEvent event) {
+			
+			 switch(event.sensor.getType()){
+			  case Sensor.TYPE_ACCELEROMETER:
+			   for(int i =0; i < 3; i++){
+				   valuesAccelerometer[i] = valuesAccelerometer[i]+ ALPHA_ACCELL * (event.values[i]-valuesAccelerometer[i]);   
+			   }
+			   break;
+			  case Sensor.TYPE_MAGNETIC_FIELD:
+			   for(int i =0; i < 3; i++){
+			    valuesMagneticField[i] = valuesMagneticField[i]+ ALPHA_MAGNETIC * (event.values[i]-valuesMagneticField[i]);
+			   }
+			   break;
+			  }
+			 int displayRotation = Surface.ROTATION_0;
+			  displayRotation = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();
+						
+						
+			  boolean success = SensorManager.getRotationMatrix(
+			       matrixR,
+			       matrixI,
+			       valuesAccelerometer,
+			       valuesMagneticField);		  
+			  
+			  float[] outR = new float[9];
+			  if (success){
+				outR = matrixR.clone();
+				if (displayRotation == Surface.ROTATION_90){
+					success = SensorManager.remapCoordinateSystem(matrixR, SensorManager.AXIS_Y, SensorManager.AXIS_MINUS_X, outR);
+				}
+				else if (displayRotation == Surface.ROTATION_270){
+					success = SensorManager.remapCoordinateSystem(matrixR, SensorManager.AXIS_MINUS_Y, SensorManager.AXIS_X, outR);
+				}
+				else if (displayRotation == Surface.ROTATION_180){
+					success = SensorManager.remapCoordinateSystem(matrixR, SensorManager.AXIS_MINUS_X, SensorManager.AXIS_MINUS_Y, outR);
+				}
+				
+			  }
+			  
+			  if(success){
+			   SensorManager.getOrientation(outR, matrixValues);
+			   double pitch = Math.toDegrees(matrixValues[1]);
+				  
+				  if (pitch < -65){
+					   float[] outRunpitched = new float[9];
+					   success = SensorManager.remapCoordinateSystem(outR, SensorManager.AXIS_X, SensorManager.AXIS_Z, outRunpitched); 
+					   SensorManager.getOrientation(outRunpitched, matrixValues);					   
+				   }
+				  
+				  bearing = Math.toDegrees(matrixValues[0]);
+				   if (bearing <0){
+					   bearing=bearing+360;
+				   }
+					   
+			  }
+		}
 
+
+		@Override
+		public void onAccuracyChanged(Sensor arg0, int arg1) {
+			// TODO Auto-generated method stub
+			
+		}
+
+
+		public float getBearing() {
+			return bearing.floatValue();
+		}
+		
+		
+		
+		
+	}
+	
 	private class NavitLocationListener implements LocationListener {
 		public boolean precise = false;
 		public void onLocationChanged(Location location) {
@@ -50,7 +174,15 @@
 				sLocationManager.removeUpdates(fastLocationListener);
 				fastProvider = null;
 			}
-			
+			if (compass==null){
+				if (want_magnetic_compass){
+				compass = new NavitMagneticCompass();
+				// first compass bearing is at next pos. fix !!
+				}
+			}
+			else {
+			location.setBearing(compass.getBearing());
+			}
 			VehicleCallback(vehicle_callbackid, location);
 		}
 		public void onProviderDisabled(String provider){}
@@ -59,6 +191,7 @@
 	}
 
 	NavitVehicle (Context context, int callbackid) {
+		this.context = context;
 		sLocationManager = (LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
 		preciseLocationListener = new NavitLocationListener();
 		preciseLocationListener.precise = true;
@@ -109,4 +242,16 @@
 		}
 
 	}
+
+	public static void toggleMagnetic() {
+		
+		want_magnetic_compass = !want_magnetic_compass;
+		if (!want_magnetic_compass){
+			compass = null;
+		}
+		
+	}
+
+	
 }
+
