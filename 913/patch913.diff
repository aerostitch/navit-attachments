diff --git a/navit/vehicle/file/vehicle_file.c b/navit/vehicle/file/vehicle_file.c
index 10bce94..39ce11a 100644
--- a/navit/vehicle/file/vehicle_file.c
+++ b/navit/vehicle/file/vehicle_file.c
@@ -84,7 +84,7 @@ struct vehicle_priv {
 	char *source;
 	struct callback_list *cbl;
 	int fd;
-	struct callback *cb,*cbt;
+	struct callback *cb,*cbt,*cb_fix_timeout;
 	char *buffer;
 	int buffer_pos;
 	char *nmea_data;
@@ -114,6 +114,7 @@ struct vehicle_priv {
 	enum file_type file_type;
 	FILE *file;
 	struct event_watch *watch;
+	struct event_timeout *ev_fix_timeout;
 	speed_t baudrate;
 	struct attr ** attrs;
 	char fixiso8601[128];
@@ -377,6 +378,42 @@ vehicle_file_enable_watch_timer(struct vehicle_priv *priv)
 
 
 //***************************************************************************
+/** @fn static void vehicle_file_fix_timeout_cb( struct vehicle_priv *priv )
+*****************************************************************************
+* @b Description: This is a callback function, called when the fix timeout
+* 		is done. Set the position to invalid.
+*****************************************************************************
+* @param      priv : pointer on the private data of the plugin
+*****************************************************************************
+**/
+static void
+vehicle_file_fix_timeout_cb(struct vehicle_priv *priv)
+{
+	priv->valid = attr_position_valid_invalid;
+	priv->ev_fix_timeout = NULL;
+	callback_list_call_attr_0(priv->cbl, attr_position_coord_geo);
+}
+
+
+//***************************************************************************
+/** @fn static void vehicle_file_restart_fix_timeout(
+ * 					struct vehicle_priv *priv)
+*****************************************************************************
+* @b Description: Cancel previous fix timeout event and add a new one
+*****************************************************************************
+* @param      priv : pointer on the private data of the plugin
+*****************************************************************************
+**/
+static void
+vehicle_file_restart_fix_timeout(struct vehicle_priv *priv)
+{
+	if (priv->ev_fix_timeout != NULL)
+		event_remove_timeout(priv->ev_fix_timeout);
+	priv->ev_fix_timeout = event_add_timeout(10000, 0, priv->cb_fix_timeout);
+}
+
+
+//***************************************************************************
 /** @fn static int vehicle_file_parse( struct vehicle_priv *priv,
 *                                      char *buffer)
 *****************************************************************************
@@ -385,7 +422,8 @@ vehicle_file_enable_watch_timer(struct vehicle_priv *priv)
 * @param      priv : pointer on the private data of the plugin
 * @param      buffer : data buffer (null terminated)
 *****************************************************************************
-* @return     1 if The GPRMC Sentence is found
+* @return     1 if new coords were received (fixtime changed) or change to
+* 		invalid
 *             0 if not found
 *****************************************************************************
 **/
@@ -458,7 +496,7 @@ vehicle_file_parse(struct vehicle_priv *priv, char *buffer)
 		   UTC of Fix[1],Latitude[2],N/S[3],Longitude[4],E/W[5],Quality(0=inv,1=gps,2=dgps)[6],Satelites used[7],
 		   HDOP[8],Altitude[9],"M"[10],height of geoid[11], "M"[12], time since dgps update[13], dgps ref station [14]
 		 */
-		if (*item[2] && *item[3] && *item[4] && *item[5]) {
+		if (*item[2] && *item[3] && *item[4] && *item[5] && *item[6] > 0) {
 			lat = g_ascii_strtod(item[2], NULL);
 			priv->geo.lat = floor(lat / 100);
 			lat -= priv->geo.lat * 100;
@@ -474,20 +512,31 @@ vehicle_file_parse(struct vehicle_priv *priv, char *buffer)
 
 			if (!g_ascii_strcasecmp(item[5],"W"))
 				priv->geo.lng=-priv->geo.lng;
-			priv->valid=attr_position_valid_valid;
+
+			if (priv->valid == attr_position_valid_invalid)
+				ret = 1;
+			priv->valid = attr_position_valid_valid;
+			vehicle_file_restart_fix_timeout(priv);
+
+			if (*item[1] && strncmp(priv->fixtime, item[1], sizeof(priv->fixtime))) {
+				ret = 1;
+				strncpy(priv->fixtime, item[1], sizeof(priv->fixtime));
+			}
 
 			dbg(lvl_info, "latitude '%2.4f' longitude %2.4f\n", priv->geo.lat, priv->geo.lng);
 
-		} else
+		} else {
+			if (priv->valid == attr_position_valid_valid)
+				ret = 1;
 			priv->valid=attr_position_valid_invalid;
+		}
+
 		if (*item[6])
 			sscanf(item[6], "%d", &priv->status);
 		if (*item[7])
 			sscanf(item[7], "%d", &priv->sats_used);
 		if (*item[8])
 			sscanf(item[8], "%lf", &priv->hdop);
-		if (*item[1]) 
-			strncpy(priv->fixtime, item[1], sizeof(priv->fixtime));
 		if (*item[9])
 			sscanf(item[9], "%lf", &priv->height);
 
@@ -537,8 +586,40 @@ vehicle_file_parse(struct vehicle_priv *priv, char *buffer)
 				&priv->fixmonth,
 				&priv->fixyear);
 			priv->fixyear += 2000;
+
+			lat = g_ascii_strtod(item[3], NULL);
+			priv->geo.lat = floor(lat / 100);
+			lat -= priv->geo.lat * 100;
+			priv->geo.lat += lat / 60;
+
+			if (!g_ascii_strcasecmp(item[4],"S"))
+				priv->geo.lat=-priv->geo.lat;
+
+			lng = g_ascii_strtod(item[5], NULL);
+			priv->geo.lng = floor(lng / 100);
+			lng -= priv->geo.lng * 100;
+			priv->geo.lng += lng / 60;
+
+			if (!g_ascii_strcasecmp(item[6],"W"))
+				priv->geo.lng=-priv->geo.lng;
+
+			if (priv->valid == attr_position_valid_invalid)
+				ret = 1;
+			priv->valid=attr_position_valid_valid;
+			vehicle_file_restart_fix_timeout(priv);
+
+			if (*item[1] && strncmp(priv->fixtime, item[1], sizeof(priv->fixtime))) {
+				ret = 1;
+				strncpy(priv->fixtime, item[1], sizeof(priv->fixtime));
+			}
+
+			dbg(lvl_info, "latitude '%2.4f' longitude %2.4f\n", priv->geo.lat, priv->geo.lng);
+
+		} else {
+			if (priv->valid == attr_position_valid_valid)
+				ret = 1;
+			priv->valid=attr_position_valid_invalid;
 		}
-		ret = 1;
 	}
 	if (!strncmp(buffer, "$GPGSV", 6) && i >= 4) {
 	/*
@@ -958,7 +1039,7 @@ vehicle_file_new_file(struct vehicle_methods
 	if(source == NULL){
 		 dbg(lvl_error,"Missing source attribute");
 		 return NULL;
-    }
+	}
 	ret = g_new0(struct vehicle_priv, 1);   // allocate and initialize to 0
 	ret->fd = -1;
 	ret->cbl = cbl;
@@ -966,6 +1047,8 @@ vehicle_file_new_file(struct vehicle_methods
 	ret->buffer = g_malloc(buffer_size);
 	ret->time=1000;
 	ret->baudrate=B4800;
+	ret->fixtime[0] = '\0';
+	ret->ev_fix_timeout = NULL;
 	state_file=attr_search(attrs, NULL, attr_state_file);
 	if (state_file) 
 		ret->statefile=g_strdup(state_file->u.str);
@@ -1014,6 +1097,7 @@ vehicle_file_new_file(struct vehicle_methods
 	*meth = vehicle_file_methods;
 	ret->cb=callback_new_1(callback_cast(vehicle_file_io), ret);
 	ret->cbt=callback_new_1(callback_cast(vehicle_file_enable_watch_timer), ret);
+	ret->cb_fix_timeout=callback_new_1(callback_cast(vehicle_file_fix_timeout_cb), ret);
 	if (ret->statefile && file_exists(ret->statefile)) {
 		ret->process_statefile=1;
 		event_add_timeout(1000, 0, ret->cb);
