Index: navit.c
===================================================================
--- navit.c	(revision 4319)
+++ navit.c	(working copy)
@@ -66,6 +66,10 @@
 #include "vehicleprofile.h"
 #include "sunriset.h"
 #include "bookmarks.h"
+#ifdef HAVE_API_WIN32_BASE
+#include <windows.h>
+#include "util.h"
+#endif
 
 /**
  * @defgroup navit the navit core instance. navit is the object containing nearly everything: A set of maps, one or more vehicle, a graphics object for rendering the map, a gui object for displaying the user interface, a route object, a navigation object and so on. Be warned that it is theoretically possible to have more than one navit object
@@ -941,6 +945,128 @@
 	}
 }
 
+/**
+ * Join several string attributes into one
+ *
+ * @param navit The navit instance
+ * @param function unused (needed to match command function signiture)
+ * @param in input attributes in[0] - separator, in[1..] - attributes to join
+ * @param out output attribute input attributes joined into single string
+ * @param valid unused 
+ * @returns nothing
+ */
+static void
+navit_cmd_strjoin(struct navit *this, char *function, struct attr **in, struct attr ***out, int *valid)
+{
+	struct attr attr;
+	gchar *ret, *sep;
+	int i;
+	attr.type=attr_type_string_begin;
+	attr.u.str=NULL;
+	if(in[0] && in[1]) {
+		sep=attr_to_text(in[0],NULL,1);
+		ret=attr_to_text(in[1],NULL,1);
+		for(i=2;in[i];i++) {
+			gchar *in_i=attr_to_text(in[i],NULL,1);
+			gchar *r=g_strjoin(sep,ret,in_i,NULL);
+			g_free(in_i);
+			g_free(ret);
+			ret=r;
+		}
+		g_free(sep);
+		attr.u.str=ret;
+		if(out) {
+			*out=attr_generic_add_attr(*out, &attr);
+		}
+		g_free(ret);
+	}
+}
+
+/**
+ * Call external program
+ *
+ * @param navit The navit instance
+ * @param function unused (needed to match command function signiture)
+ * @param in input attributes in[0] - name of executable, in[1..] - parameters
+ * @param out output attribute unused
+ * @param valid unused 
+ * @returns nothing
+ */
+static void
+navit_cmd_spawn(struct navit *this, char *function, struct attr **in, struct attr ***out, int *valid)
+{
+	int i,j, nparms, nvalid;
+	const char ** spawn_params=NULL;
+
+	nparms=0;
+	nvalid=0;
+	if(in) {
+		while(in[nparms]) {
+			if (in[nparms]->type!=attr_none) 
+				nvalid++;
+			nparms++;
+		}
+	}
+	
+	if(nvalid>0) {
+		spawn_params=g_new(char*,nvalid+1);
+		for(i=0,j=0;in[i];i++) {
+			if(in[i]->type!=attr_none ) {
+				spawn_params[j++]=attr_to_text(in[i],NULL,1);
+			} else {
+				dbg(0,"Parameter #%i is attr_none - skipping\n",i);
+			}
+		}
+		spawn_params[j]=NULL;
+#ifdef USE_EXEC
+		if(fork()==0) {
+			execvp(spawn_params[0], spawn_params);
+			/*Shouldn't reach here*/
+			exit(1);
+		}
+		for(i=0;spawn_params[i];i++)
+			g_free(spawn_params[i]);
+		g_free(spawn_params);
+		return;
+#else
+#ifdef HAVE_API_WIN32_BASE
+	{
+		char *cmdline;
+		PROCESS_INFORMATION pr;
+		LPCWSTR cmd,args;
+		cmdline=g_strjoinv(" ",spawn_params+1);
+		cmd = newSysString(spawn_params[0]);
+		args=newSysString(cmdline);
+		CreateProcess(cmd, args, NULL, NULL, 0, 0, NULL, NULL, NULL, &pr);
+		dbg(0, "CreateProcess(%s,%s)\n",spawn_params[0],cmdline);
+		g_free(cmdline);
+		g_free(cmd);
+		g_free(args);
+		for(i=0;spawn_params[i];i++)
+			g_free(spawn_params[i]);
+		g_free(spawn_params);
+		return;
+	}
+#else
+	{
+		char *cmdline;
+		cmdline=g_strjoinv(" ",spawn_params);
+		system(cmdline);
+		g_free(cmdline);
+		for(i=0;spawn_params[i];i++)
+			g_free(spawn_params[i]);
+		g_free(spawn_params);
+		return;
+	}
+#endif
+#endif
+	for(i=0;spawn_params[i];i++)
+		g_free(spawn_params[i]);
+	g_free(spawn_params);
+	}
+}
+
+
 static struct command_table commands[] = {
 	{"zoom_in",command_cast(navit_cmd_zoom_in)},
 	{"zoom_out",command_cast(navit_cmd_zoom_out)},
@@ -956,6 +1082,8 @@
 	{"pop_int",command_cast(navit_cmd_pop_int)},
 	{"int_stack_size",command_cast(navit_cmd_int_stack_size)},
 	{"toggle_layer",command_cast(navit_cmd_toggle_layer)},
+	{"strjoin",command_cast(navit_cmd_strjoin)},
+	{"spawn",command_cast(navit_cmd_spawn)},
 };
 	
 void 
