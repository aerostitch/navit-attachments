Index: android/src/org/navitproject/navit/NavitGraphics.java
===================================================================
--- android/src/org/navitproject/navit/NavitGraphics.java	(revision 6025)
+++ android/src/org/navitproject/navit/NavitGraphics.java	(working copy)
@@ -20,6 +20,8 @@
 package org.navitproject.navit;
 
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 
@@ -26,7 +28,9 @@
 import android.app.Activity;
 import android.content.Context;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.os.Environment; 
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.PointF;
@@ -931,6 +942,67 @@
 		draw_canvas.drawBitmap(bitmap, x, y, paint);
 	}
 
+	
+	
+	/* takes an image and draws it on the screen as a prerendered maptile
+	 * 
+	 * 
+	 * 
+	 * @param imagepath		a string representing an absolute or relative path
+	 * 		  				to the image file
+	 * @param count			the number of points specified 
+	 * @param p0x and p0y 	specifying the top left point
+	 * @param p1x and p1y 	specifying the top right point
+	 * @param p2x and p2y 	specifying the bottom left point, not yet used but kept 
+	 * 						for compatibility with the linux port
+	 * 
+	 * TODO make it work with 4 points specified to make it work for 3D mapview, so it can be used
+	 * 		for small but very detailed maps as well as for large maps with very little detail but large
+	 * 		coverage.
+	 * TODO make it work with rectangular tiles as well ?
+	 */
+	protected void draw_image_warp(String imagepath, int count, int p0x, int p0y, int p1x, int p1y, int p2x, int p2y)
+	{
+	
+		float width;
+		float scale;
+		float deltaY;
+		float deltaX;
+		float angle;
+		Bitmap bitmap = null;
+		FileInputStream infile;	
+		Matrix matrix;	
+	
+		if (count == 3)
+		{			
+			if (!imagepath.startsWith("/"))
+				imagepath = Environment.getExternalStorageDirectory().getPath()+"/navit/"+imagepath;				
+			try
+			{
+				infile = new FileInputStream(imagepath);
+				bitmap = BitmapFactory.decodeStream(infile);
+				infile.close();
+			}
+			catch (IOException e)
+			{
+				Log.e("NavitGraphics","could not open "+imagepath);
+			}
+			if (bitmap != null)		
+			{
+				matrix = new Matrix();
+				deltaX = p1x - p0x;
+				deltaY = p1y - p0y;
+				width = (float) (Math.sqrt((deltaX * deltaX) + (deltaY * deltaY)));			
+				angle = (float) (Math.atan2(deltaY, deltaX) * 180d / Math.PI);
+				scale = width / bitmap.getWidth();
+				matrix.preScale(scale, scale);
+				matrix.postTranslate(p0x, p0y);			
+				matrix.postRotate(angle, p0x, p0y);
+				draw_canvas.drawBitmap(bitmap, matrix, null);
+			}
+		}
+	}
+	
 	/* These constants must be synchronized with enum draw_mode_num in graphics.h. */
 	public static final int draw_mode_begin = 0;
 	public static final int draw_mode_end = 1;
@@ -1000,3 +1072,5 @@
 	public static native String CallbackLocalizedString(String s);
 
 }
+
+

Index: graphics/android/graphics_android.c
===================================================================
--- graphics/android/graphics_android.c	(revision 6025)
+++ graphics/android/graphics_android.c	(working copy)
@@ -36,7 +36,7 @@
 
 struct graphics_priv {
 	jclass NavitGraphicsClass;
-	jmethodID NavitGraphics_draw_polyline, NavitGraphics_draw_polygon, NavitGraphics_draw_rectangle, NavitGraphics_draw_circle, NavitGraphics_draw_text, NavitGraphics_draw_image, NavitGraphics_draw_mode, NavitGraphics_draw_drag, NavitGraphics_overlay_disable, NavitGraphics_overlay_resize, NavitGraphics_SetCamera;
+	jmethodID NavitGraphics_draw_polyline, NavitGraphics_draw_polygon, NavitGraphics_draw_rectangle, NavitGraphics_draw_circle, NavitGraphics_draw_text, NavitGraphics_draw_image, NavitGraphics_draw_image_warp, NavitGraphics_draw_mode, NavitGraphics_draw_drag, NavitGraphics_overlay_disable, NavitGraphics_overlay_resize, NavitGraphics_SetCamera;
 
 	jclass PaintClass;
 	jmethodID Paint_init,Paint_setStrokeWidth,Paint_setARGB;
@@ -364,6 +364,7 @@
 	(*jnienv)->DeleteLocalRef(jnienv, string);
 }
 
+
 static void
 draw_image(struct graphics_priv *gra, struct graphics_gc_priv *fg, struct point *p, struct graphics_image_priv *img)
 {
@@ -373,6 +374,26 @@
 	
 }
 
+static void
+draw_image_warp (struct graphics_priv *gr, struct graphics_gc_priv *fg, struct point *p, int count, char *label)
+{
+
+	/*
+	 *
+	 *
+	 * if coord count==3 then top.left top.right bottom.left
+	 *
+	 */
+
+	if (count==3)
+	{
+		jstring string = (*jnienv)->NewStringUTF(jnienv, label);
+		(*jnienv)->CallVoidMethod(jnienv, gr->NavitGraphics, gr->NavitGraphics_draw_image_warp, string, count,  p[0].x, p[0].y,p[1].x, p[1].y, p[2].x, p[2].y);
+		(*jnienv)->DeleteLocalRef(jnienv, string);
+	}
+}
+
+
 static void draw_drag(struct graphics_priv *gra, struct point *p)
 {
 	(*jnienv)->CallVoidMethod(jnienv, gra->NavitGraphics, gra->NavitGraphics_draw_drag, p ? p->x : 0, p ? p->y : 0);
@@ -452,7 +473,7 @@
 	draw_circle,
 	draw_text,
 	draw_image,
-	NULL,
+	draw_image_warp,
 	draw_drag,
 	font_new,
 	gc_new,
@@ -642,6 +663,8 @@
 		return 0;
 	if (!find_method(ret->NavitGraphicsClass, "draw_image", "(Landroid/graphics/Paint;IILandroid/graphics/Bitmap;)V", &ret->NavitGraphics_draw_image))
 		return 0;
+	if (!find_method(ret->NavitGraphicsClass, "draw_image_warp", "(Ljava/lang/String;IIIIIII)V", &ret->NavitGraphics_draw_image_warp))
+		return 0;
 	if (!find_method(ret->NavitGraphicsClass, "draw_mode", "(I)V", &ret->NavitGraphics_draw_mode))
 		return 0;
 	if (!find_method(ret->NavitGraphicsClass, "draw_drag", "(II)V", &ret->NavitGraphics_draw_drag))
@@ -955,3 +978,4 @@
         plugin_register_graphics_type("android", graphics_android_new);
 	plugin_register_event_type("android", event_android_new);
 }
+
Index: graphics.c
===================================================================
--- graphics.c	(revision 6025)
+++ graphics.c	(working copy)
@@ -727,7 +727,7 @@
 {
 	struct graphics_image *this_;
 	char* hash_key = g_strdup_printf("%s*%d*%d*%d",path,w,h,rotate);
-
+//	dbg(0," image %s, w=%d, h=%d, rotate=%d\n",path,w,h,rotate);
 	if ( g_hash_table_lookup_extended( gra->image_cache_hash, hash_key, NULL, (gpointer)&this_) ) {
 		g_free(hash_key);
 		dbg(lvl_debug,"Found cached image%sfor '%s'\n",this_?" ":" miss ",path);
@@ -2148,13 +2148,21 @@
 		}
 		break;
 	case element_image:
-		dbg(lvl_debug,"image: '%s'\n", di->label);
-		if (gra->meth.draw_image_warp) {
+	//	dbg(0,"image: '%s'\n", di->label);
+		if (gra->meth.draw_image_warp)
+
+#ifdef HAVE_API_ANDROID
+
+			gra->meth.draw_image_warp(gra->priv, gra->gc[0]->priv, pa, count, di->label);
+#else
+		{
 			img=graphics_image_new_scaled_rotated(gra, di->label, -1, -1, 0);
 			if (img)
 				gra->meth.draw_image_warp(gra->priv, gra->gc[0]->priv, pa, count, img->priv);
-		} else
+		}
+		else
 			dbg(lvl_error,"draw_image_warp not supported by graphics driver drawing '%s'\n", di->label);
+#endif
 		break;
 	case element_arrows:
 		display_draw_arrows(gra,gc,pa,count);
@@ -2969,3 +2977,4 @@
 		curr=g_list_next(curr);
 	}
 }
+
Index: graphics.h
===================================================================
--- graphics.h	(revision 6025)
+++ graphics.h	(working copy)
@@ -68,7 +68,11 @@
 	void (*draw_circle)(struct graphics_priv *gr, struct graphics_gc_priv *gc, struct point *p, int r);
 	void (*draw_text)(struct graphics_priv *gr, struct graphics_gc_priv *fg, struct graphics_gc_priv *bg, struct graphics_font_priv *font, char *text, struct point *p, int dx, int dy);
 	void (*draw_image)(struct graphics_priv *gr, struct graphics_gc_priv *fg, struct point *p, struct graphics_image_priv *img);
+#ifdef HAVE_API_ANDROID
+	void (*draw_image_warp)(struct graphics_priv *gr, struct graphics_gc_priv *fg, struct point *p, int count, char *label);
+#else
 	void (*draw_image_warp)(struct graphics_priv *gr, struct graphics_gc_priv *fg, struct point *p, int count, struct graphics_image_priv *img);
+#endif
 	void (*draw_drag)(struct graphics_priv *gr, struct point *p);
 	struct graphics_font_priv *(*font_new)(struct graphics_priv *gr, struct graphics_font_methods *meth, char *font,  int size, int flags);
 	struct graphics_gc_priv *(*gc_new)(struct graphics_priv *gr, struct graphics_gc_methods *meth);
Index: xslt/map_sdcard_navitmap_bin.xslt
===================================================================
--- xslt/map_sdcard_navitmap_bin.xslt	(revision 6025)
+++ xslt/map_sdcard_navitmap_bin.xslt	(working copy)
@@ -2,5 +2,6 @@
 <xsl:transform version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xi="http://www.w3.org/2001/XInclude">
 	<xsl:template match="/config/navit/mapset/xi:include">
 		<maps type="binfile" data="/sdcard/navit/*.bin" />
+		<maps type="textfile" data="/sdcard/navit/*.txt" />
 	</xsl:template>
 </xsl:transform>
