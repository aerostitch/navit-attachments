ndex: navit/maptool/maptool.c
===================================================================
--- navit/maptool/maptool.c	(revision 4077)
+++ navit/maptool/maptool.c	(working copy)
@@ -103,32 +103,41 @@
 static void
 usage(FILE *f)
 {
-	/* DEVELOPPERS : don't forget to update the manpage if you modify theses options */
+	/* DEVELOPERS : don't forget to update the manpage if you modify theses options */
 	fprintf(f,"\n");
-	fprintf(f,"maptool - parse osm textfile and converts to Navit binfile format\n\n");
-	fprintf(f,"Usage :\n");
-	fprintf(f,"bzcat planet.osm.bz2 | maptool mymap.bin\n");
+	fprintf(f,"maptool - parse osm textfile and convert to Navit binfile format\n\n");
+	fprintf(f,"Usage (for OSM XML data):\n");
+ 	fprintf(f,"bzcat planet.osm.bz2 | maptool mymap.bin\n");
+	fprintf(f,"Usage (for OSM Protobuf/PBF data):\n");
+	fprintf(f,"maptool --protobuf -i my_OSM_map.osm.pbf my_Navit_map.bin\n");
 	fprintf(f,"Available switches:\n");
-	fprintf(f,"-h (--help)              : this screen\n");
-	fprintf(f,"-6 (--64bit)             : set zip 64 bit compression\n");
-	fprintf(f,"-a (--attr-debug-level)  : control which data is included in the debug attribute\n");
-	fprintf(f,"-c (--dump-coordinates)  : dump coordinates after phase 1\n");
+	fprintf(f,"-h (--help)                 : this screen\n");
+	fprintf(f,"-6 (--64bit)                : use Zip64 format when creating binfile\n");
+	fprintf(f,"-D (--dump)                 : write Navit textfile to stdout\n");
+	fprintf(f,"-N (--nodes-only)           : process only nodes\n");
+	fprintf(f,"-S (--slice-size) <size>    : amount of memory to use (in bytes, default: "LONGLONG_FMT" MiB)\n", (slice_size/(1024*1024)));
+	fprintf(f,"-W (--ways-only)            : process only ways\n");
+	fprintf(f,"-a (--attr-debug-level) <level> : control which data is included in the debug attribute (level=1...9, default=1)\n");
+	fprintf(f,"-c (--dump-coordinates)     : dump coordinates after phase 1\n");
 #ifdef HAVE_POSTGRESQL
-	fprintf(f,"-d (--db)                : get osm data out of a postgresql database with osm simple scheme and given connect string\n");
+	fprintf(f,"-d (--db) <conn. string>    : get osm data out of a postgresql database with osm simple scheme and given connect string\n");
 #endif
-	fprintf(f,"-e (--end)               : end at specified phase\n");
-	fprintf(f,"-i (--input-file)        : specify the input file name (OSM), overrules default stdin\n");
-	fprintf(f,"-k (--keep-tmpfiles)     : do not delete tmp files after processing. useful to reuse them\n\n");
-	fprintf(f,"-N (--nodes-only)        : process only nodes\n");
-	fprintf(f,"-o (--coverage)          : map every street to item coverage\n");
-	fprintf(f,"-P (--protobuf)          : input file is protobuf\n");
-	fprintf(f,"-r (--rule-file)         : read mapping rules from specified file\n");
-	fprintf(f,"-s (--start)             : start at specified phase\n");
-	fprintf(f,"-S (--slice-size)        : defines the amount of memory to use, in bytes. Default is 1GB\n");
-	fprintf(f,"-w (--dedupe-ways)       : ensure no duplicate ways or nodes. useful when using several input files\n");
-	fprintf(f,"-W (--ways-only)         : process only ways\n");
-	fprintf(f,"-z (--compression-level) : set the compression level\n");
-	
+	fprintf(f,"-e (--end) <phase>          : end at specified phase\n");
+	fprintf(f,"-k (--keep-tmpfiles)        : do not delete tmp files after processing. useful to reuse them\n\n");
+	fprintf(f,"-n (--ignore-unknown)       : ignore ways and points of unknown type\n");
+	fprintf(f,"-P (--protobuf)             : input file is a Protobuf (PBF) file\n");
+	fprintf(f,"-r (--rule-file)            : read mapping rules from specified file\n");
+	fprintf(f,"-s (--start) <phase>        : start at specified phase\n");
+	fprintf(f,"-i (--input-file) <file>    : specify the input file name (OSM), overrules default stdin\n");
+	fprintf(f,"-w (--dedupe-ways)          : ensure no duplicate ways or nodes. useful when using several input files\n");
+	fprintf(f,"-z (--compression-level) <level> : set the zip compression level\n");
+	fprintf(f,"Internal options (undocumented):\n");
+	fprintf(f,"-b (--binfile)\n");
+	fprintf(f,"-B \n");
+	fprintf(f,"-m (--map) \n");
+	fprintf(f,"-O \n");
+	fprintf(f,"-p (--plugin) \n");
+	fprintf(f,"-R \n");
 	exit(1);
 }
 
@@ -192,31 +201,34 @@
 		int option_index = 0;
 		static struct option long_options[] = {
 			{"64bit", 0, 0, '6'},
+			// no long option for B
+			{"dump", 0, 0, 'D'},
+			{"nodes-only", 0, 0, 'N'},
+			// no long option for O
+			{"protobuf", 0, 0, 'P'},
+			// no long option for R
+			{"slice-size", 1, 0, 'S'},
+			{"ways-only", 0, 0, 'W'},
 			{"attr-debug-level", 1, 0, 'a'},
 			{"binfile", 0, 0, 'b'},
-			{"compression-level", 1, 0, 'z'},
+			{"dump-coordinates", 0, 0, 'c'},
 #ifdef HAVE_POSTGRESQL
 			{"db", 1, 0, 'd'},
 #endif
-			{"dedupe-ways", 0, 0, 'w'},
-			{"dump", 0, 0, 'D'},
-			{"dump-coordinates", 0, 0, 'c'},
 			{"end", 1, 0, 'e'},
 			{"help", 0, 0, 'h'},
+			{"input-file", 1, 0, 'i'},
 			{"keep-tmpfiles", 0, 0, 'k'},
-			{"nodes-only", 0, 0, 'N'},
+			{"ignore-unknown", 0, 0, 'n'},
 			{"map", 1, 0, 'm'},
 			{"plugin", 1, 0, 'p'},
-			{"protobuf", 0, 0, 'P'},
+			{"rule-file", 1, 0, 'r'},
 			{"start", 1, 0, 's'},
-			{"input-file", 1, 0, 'i'},
-			{"rule-file", 1, 0, 'r'},
-			{"ignore-unknown", 0, 0, 'n'},
-			{"ways-only", 0, 0, 'W'},
-			{"slice-size", 1, 0, 'S'},
+			{"dedupe-ways", 0, 0, 'w'},
+			{"compression-level", 1, 0, 'z'},
 			{0, 0, 0, 0}
 		};
-		c = getopt_long (argc, argv, "6B:DNO:PWS:a:bc"
+		c = getopt_long (argc, argv, "6B:DNO:PRS:Wa:bc"
 #ifdef HAVE_POSTGRESQL
 					      "d:"
 #endif
@@ -335,9 +347,6 @@
 			compression_level=atoi(optarg);
 			break;
 #endif
-		case '?':
-			usage(stderr);
-			break;
 		default:
 			fprintf(stderr,"c=%d\n", c);
 		}
