Index: navit/gui/internal/gui_internal.c
===================================================================
--- navit/gui/internal/gui_internal.c	(revision 4800)
+++ navit/gui/internal/gui_internal.c	(working copy)
@@ -2284,7 +2284,8 @@
 removecase(char *s) 
 {
 	char *r;
-	r=g_utf8_casefold(s,-1);
+	//r=g_utf8_casefold(s,-1);
+	r=linguistics_casefold(s);
 	return r;
 }
 
@@ -2534,8 +2535,12 @@
                 item_attr_rewind(item);
                 
 		for(s=long_name,f=param->filter;f && s;f=g_list_next(f)) {
-			s=strstr(s,f->data);
-			if(!s) 
+			match=0;
+			while(s && *s && !match) {
+				match=!linguistics_compare(s,f->data,1);
+				s=g_utf8_find_next_char(s,NULL);
+			}
+			if(!s || !*s) 
 				break;
 			s=g_utf8_strchr(s,-1,' ');
 		}
Index: navit/linguistics.c
===================================================================
--- navit/linguistics.c	(revision 4800)
+++ navit/linguistics.c	(working copy)
@@ -228,8 +228,195 @@
 {"ð","d","dh"},
 {"ŋ","n","ng"},
 {"þ","t","th"},
+
+/* Cyrillic capital */
+{"Ё","Е"},
+{"Й","И"},
+{"І","I"},
+{"Ї","I"},
+{"Ў","У"},
+{"Є","Е","Э"},
+{"Ґ","Г"},
+{"Ѓ","Г"},
+{"Ђ","Д"},
+{"Ќ","К"},
+{"Љ","Л","ЛЬ"},
+{"Њ","Н","НЬ"},
+{"Џ","Ц"},
+
+/* Cyrillic small */
+{"ё","е"},
+{"й","и"},
+{"і","i"},
+{"ї","i"},
+{"ў","у"},
+{"є","е","Э"},
+{"ґ","г"},
+{"ѓ","г"},
+{"ђ","д"},
+{"ќ","к"},
+{"љ","л","ль"},
+{"њ","н","нь"},
+{"џ","ц"},
+
 };
+static GHashTable *special_hash;
 
+static const char *upperlower[]={
+/*Latin diacritics*/
+"ÄËÏÖÜŸŐŰÁĆÉÍĹŃÓŔŚÚÝŹĄĘĮŲĊĖĠİĿŻĐĦŁŦÅŮČĎĚĽŇŘŠŤŽØĀĒĪŌŪĂĔĞĬŎŬÂĈÊĜĤÎĴÔŜÛŴŶÇĢĶĻŅŖŞŢÃĨÑÕŨÀÈÌÒÙÆĲŒÐŊÞ",
+"äëïöüÿőűáćéíĺńóŕśúýźąęįųċėġıŀżđħłŧåůčďěľňřšťžøāēīōūăĕğĭŏŭâĉêĝĥîĵôŝûŵŷçģķļņŗşţãĩõñũàèìòùæĳœðŋþ",
+/*Cyrillic*/
+"АБВГҐЃДЂЕЄЁЖЗИЙКЌЛЉМНЊОПРСТУФХЦЏЧШЩЪЫЬЭЮЯІЇЎ",
+"абвгґѓдђеєёжзийкќлљмнњопрстуфхцџчшщъыьэюяіїў",
+
+NULL
+};
+
+static GHashTable *casefold_hash;
+
+
+struct special_pos {
+	char **variants;
+	int n;
+	char *s1, *s2;
+};
+
+
+
+static char** 
+linguistics_get_special(char *str, char *end)
+{
+	char buf[10];
+	int len;
+	if(!end)
+		end=g_utf8_find_next_char(str,NULL);
+	len=end-str+1;
+	g_strlcpy(buf,str,len>10?10:len);
+	return g_hash_table_lookup(special_hash,buf);
+}
+
+
+/*
+ *  Get an utf-8 string, return the same prepared for case insensetive search. Result shoud be g_free()d after use.
+ */
+char*
+linguistics_casefold(char *in)
+{
+	int len=strlen(in);
+	char *src=in;
+	char *ret=g_new(char,len+1);
+	char *dest=ret;
+	char buf[10];
+	while(*src && dest-ret<len){
+		if(*src>='A' && *src<='Z') {
+			*dest++=*src++ - 'A' + 'a';
+		} else if (!(*src&128)) {
+			*dest++=*src++;
+		} else {
+			int charlen;
+			char *tmp, *folded;
+			tmp=g_utf8_find_next_char(src,NULL);
+			charlen=tmp-src+1;
+			g_strlcpy(buf,src,charlen>10?10:charlen);
+			folded=g_hash_table_lookup(casefold_hash,buf);
+			if(folded) {
+				while(*folded && dest-ret<len)
+					*dest++=*folded++;
+				src=tmp;
+			} else {
+				while(src<tmp && dest-ret<len)
+					*dest++=*src++;
+			}
+		}
+	}
+	*dest=0;
+	if(*src)
+		dbg(0,"Casefolded string for '%s' needs extra space, result is trucated to '%s'.\n",in,ret);
+	return ret;
+}
+
+/**
+ * @brief Compare two strings using special characters expansion.
+ *
+ * @param in str first string to compare, special characters are expanded.
+ * @param in match second string to compare, special characters are not expanded.
+ * @param in partial if = 1 then str string may be shorter than match string, in which case the rest from str isn't analysed.
+ * @return  =0 strings matched, =1 not matched. Note this function return value is not fully compatible with strcmp().
+ */
+
+int
+linguistics_compare(char *str, char *match, int partial)
+{
+	char *s1=str, *s2=match;
+	char **sp;
+	int ret=0;
+	int got_match;
+	GList *l=NULL;
+	while (*s1 && *s2) {
+		int j;
+		struct special_pos *spp;
+		for(j=0;s1[j] && s1[j]==s2[j];j++);
+		if(!s2[j] && (partial || !s1[j])) {
+			//MATCH!
+			ret=0;
+			break;
+		}
+		char *utf_boundary=s1, *tmp;
+		while(*(tmp=g_utf8_find_next_char(utf_boundary, NULL))) {
+			if(tmp>s1+j)
+				break;
+			utf_boundary=tmp;
+		}
+		sp=linguistics_get_special(utf_boundary,tmp);
+		if(sp){
+			spp=g_new(struct special_pos,1);
+			spp->variants=sp;
+			spp->n=1;
+			spp->s1=utf_boundary;
+			spp->s2=s2+(utf_boundary-s1);
+			l=g_list_prepend(l,spp);
+		} 
+
+		got_match=0;
+		while(l && !got_match) {
+			spp=l->data;
+			s1=spp->s1;
+			s2=spp->s2;
+			while(spp->n<3 && !got_match) {
+				char *s=spp->variants[(spp->n)++];
+				int len;
+				if(!s)
+					break;
+				len=strlen(s);
+				if(!strncmp(s,s2,len)) {
+					s2+=len;
+					s1+=strlen(spp->variants[0]);
+					got_match=1;
+					break;
+				}
+			}
+			if(spp->n>=3 || !spp->variants[spp->n]){
+				g_free(spp);
+				l=g_list_delete_link(l,l);
+			}
+		}
+		if(!got_match) {
+			// NO MATCH
+			// FIXME: If we're going to use this function to sort a string list alphabetically we should use 
+			// utf-aware comparison here.
+			ret=1;
+			break;
+		}
+	}
+	while(l) {
+		g_free(l->data);
+		l=g_list_delete_link(l,l);
+	}
+	return ret;
+}
+
+
 char *
 linguistics_expand_special(char *str, int mode)
 {
@@ -299,7 +486,35 @@
 	return 1;
 }
 
+static char 
+*linguistics_dup_utf8_char(const char *s)
+{
+	char *ret, *next;
+	next=g_utf8_find_next_char(s,NULL);
+	ret=g_new(char, next-s+1);
+	g_strlcpy(ret,s,next-s+1);
+	return ret;
+}
+
 void
 linguistics_init(void)
 {
+	int i;
+	special_hash=g_hash_table_new(g_str_hash, g_str_equal);
+	casefold_hash=g_hash_table_new(g_str_hash, g_str_equal);
+	for (i = 0 ; i < sizeof(special)/sizeof(special[0]); i++)
+		g_hash_table_insert(special_hash,(gpointer)special[i][0],special[i]);
+
+	for (i = 0 ; upperlower[i]; i+=2) {
+		int j,k;
+		for(j=0,k=0;upperlower[i][j] && upperlower[i+1][k];) {
+			char *s1=linguistics_dup_utf8_char(upperlower[i]+j);
+			char *s2=linguistics_dup_utf8_char(upperlower[i+1]+k);
+			g_hash_table_insert(casefold_hash,s1,s2);
+			j+=strlen(s1);
+			k+=strlen(s2);
+		}
+	}
+		
 }
+
Index: navit/linguistics.h
===================================================================
--- navit/linguistics.h	(revision 4800)
+++ navit/linguistics.h	(working copy)
@@ -4,6 +4,8 @@
 char *linguistics_expand_special(char *str, int mode);
 char *linguistics_next_word(char *str);
 void linguistics_init(void);
+char *linguistics_casefold(char *in);
+int linguistics_compare(char *str, char *match, int partial);
 #ifdef __cplusplus
 }
 #endif
